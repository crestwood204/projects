import getPrimeFactors from "../../../helpers/getPrimeFactors";
/*
 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

 */

const problem12 = () => {
  let hasMoreThan500Divisors = false;
  let currTriangleNumber = 0;
  let index = 500;

  while (!hasMoreThan500Divisors) {
    currTriangleNumber = getTriangleNumber(index);

    const numCompositeFactors = numFactors(currTriangleNumber);

    if (numCompositeFactors > 500) {
      hasMoreThan500Divisors = true;
    }

    index++;
  }

  return `${currTriangleNumber}`;
};

export default problem12;

const getTriangleNumber = (n: number) => {
  return (n * (n + 1)) / 2;
};

// calculates number of composite factors:

/*
 * Number of composite factors can be calculated by thinking of the number of occurences each prime factor appears in
 * Think of the prime factors for 28: [2, 2, 7]
 * We can think of the number of possible combinations as 2^x * 7^y where x = 0, 1, or 2 and y = 0 or 1.
 * There will be one case where x = y = 0 in which case, the composite factor will be 1.
 */
const numFactors = (n: number): number => {
  const primeFactors = getPrimeFactors(n);

  // primeFactor: number of times the primeFactor occurs in the number
  const primeFactorMap: Record<number, number> = {};
  primeFactors.forEach((primeFactor) => {
    if (primeFactorMap.hasOwnProperty(primeFactor)) {
      primeFactorMap[primeFactor] += 1;
    } else {
      primeFactorMap[primeFactor] = 1;
    }
  });

  return Object.values(primeFactorMap)
    .map((numOccurences) => numOccurences + 1)
    .reduce((acc, curr) => acc * curr, 1);
};
